application {
  config {
    applicationType monolith
    authenticationType session
    baseName gammaJH
    blueprints []
    buildTool gradle
    cacheProvider ehcache
    clientFramework angularX
    clientPackageManager npm
    clientTheme lumen
    creationTimestamp 1660081398790
    databaseType sql
    devDatabaseType mysql
    dtoSuffix DTO
    enableGradleEnterprise false
    enableHibernateCache false
    enableSwaggerCodegen false
    enableTranslation true
    gradleEnterpriseHost ""
    jhiPrefix jhi
    jhipsterVersion "7.9.2"
    languages [en, es]
    messageBroker false
    microfrontend false
    microfrontends []
    nativeLanguage en
    otherModules []
    packageName com.thegraid.gamma
    prodDatabaseType mysql
    reactive false
    rememberMeKey "2f51cb2b5a56a62718e77f9cac4d420799d6a01a8c4cc2fd50f271a9bdaf7c41c8bb9b10f5b5aa0046ee1f28326be9d4cd36"
    searchEngine false
    serverPort 8080
    serviceDiscoveryType no
    skipUserManagement false
    testFrameworks []
    websocket spring-websocket
    withAdminUi true
  }

  entities AccountInfo, Asset, GameClass, GameInst, GameInstProps, GamePlayer, MemberGameProps, Player
}
/** extension to User (user is the owner of a stable of horses) 
 * Account Type indicates the payment properties and the League user is in.
 * maybe this could fold into User.role ?
 */
entity AccountInfo {
  @Version
  version Integer
  type String // or index to a table of AccountType tokens... this table is TBD
  // for ex: some types can create/own Assets
  // some types get paid...
}
/** Assets owned by a member/user; (the horses) a virtual file-system?  */
entity Asset {
  @Version
  version Integer
  name String maxlength(45)
  main Boolean
  auto Boolean
  path String
  include String
}
/** Which Game engine/jar to play. */
entity GameClass {  // DTO
  @Version
  version Integer
  name String maxlength(45)
  revision String maxlength(45)
  launcherPath String
  gamePath String
  docsPath String
  propsNames String
  updated Instant
}
/** Instance of a Game. */
entity GameInst {  // DTO
  @Version
  version Integer
  gameName String maxlength(45)
  hostUrl String
  passcode String
  created Instant
  started Instant
  finished Instant
  updated Instant
  scoreA Integer
  scoreB Integer
  ticks Long   // how long the GameInst lasted (# of turns)
}
/** the final negotiated properties for GameInst */
entity GameInstProps {
  @Version
  version Integer
  seed Long
  mapName String
  mapSize Integer
  npcCount Integer
  jsonProps String
  updated Instant
}
/** one of 2 Players (A or B) in a GameInst */
entity GamePlayer {
  @Version
  version Integer
  role String maxlength(2) // 'A' or 'B'
  ready Boolean
}
/** member/player proposes properties for a new GameInst. */
entity MemberGameProps {
  @Version
  version Integer
  seed Long // set random generator
  mapName String maxlength(45)
  mapSize Integer
  npcCount Integer
  jsonProps String
  configName String maxlength(45)
}
/** a virtual player (the horse in a horse-race)  */
entity Player { // DTO
  @Version
  version Integer
  name String maxlength(45)
  rank Integer
  score Integer
  scoreTime Instant
  rankTime Instant
  displayClient String maxlength(45)
}

relationship OneToOne {
  AccountInfo to @Id User // extension to 'user'
  GameInst{props} to @Id GameInstProps{gameInst} // GameProps as negotiated
}
relationship ManyToOne {
  GamePlayer{gameInst} to GameInst
  GamePlayer{player} to Player
  GameInst{playerA} to Player
  GameInst{playerB} to Player
  GameInst{gameClass} to GameClass
  Player{gameClass} to GameClass
  Player{mainJar} to Asset
  Asset{user} to User
  MemberGameProps{user} to User
  MemberGameProps{gameClass} to GameClass
}

dto * with mapstruct
service GameInst, GameInstProps with serviceClass
